@article{fuzz,
author = {Winterer, Dominik and Zhang, Chengyu and Su, Zhendong},
title = {On the Unusual Effectiveness of Type-Aware Operator Mutations for Testing SMT Solvers},
year = {2020},
issue_date = {November 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {OOPSLA},
url = {https://doi.org/10.1145/3428261},
doi = {10.1145/3428261},
abstract = {We propose type-aware operator mutation, a simple, but unusually effective approach for testing SMT solvers. The key idea is to mutate operators of conforming types within the seed formulas to generate well-typed mutant formulas. These mutant formulas are then used as the test cases for SMT solvers. We realized type-aware operator mutation within the OpFuzz tool and used it to stress-test Z3 and CVC4, two state-of-the-art SMT solvers. Type-aware operator mutations are unusually effective: During one year of extensive testing with OpFuzz, we reported 1092 bugs on Z3’s and CVC4’s respective GitHub issue trackers, out of which 819 unique bugs were confirmed and 685 of the confirmed bugs were fixed by the developers. The detected bugs are highly diverse — we found bugs of many different types (soundness bugs, invalid model bugs, crashes, etc.), logics and solver configurations. We have further conducted an in-depth study of the bugs found by OpFuzz. The study results show that the bugs found by OpFuzz are of high quality. Many of them affect core components of the SMT solvers’ codebases, and some required major changes for the developers to fix. Among the 819 confirmed bugs found by OpFuzz,184 were soundness bugs, the most critical bugs in SMT solvers,and 489 were in the default modes of the solvers. Notably, OpFuzz found 27 critical soundness bugs in CVC4, which has proved to be a very stable SMT solver.},
journal = {Proc. ACM Program. Lang.},
month = {nov},
articleno = {193},
numpages = {25},
keywords = {Type-aware operator mutation, SMT solvers, Fuzz testing}
}

@inproceedings{ftrs,
  author    = {Melli\`{e}s, Paul-Andr\'{e} and Zeilberger, Noam},
  title     = {Functors Are Type Refinement Systems},
  year      = {2015},
  isbn      = {9781450333009},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/2676726.2676970},
  doi       = {10.1145/2676726.2676970},
  booktitle = {Proceedings of the 42nd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  pages     = {3–16},
  numpages  = {14},
  keywords  = {refinement types, category theory, type theory},
  location  = {Mumbai, India},
  series    = {POPL '15}
}